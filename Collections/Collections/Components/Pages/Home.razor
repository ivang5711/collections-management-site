@page "/"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager _navigationManager

<PageTitle>Collections home page</PageTitle>

@*
<div class="container-xxl py-3">
    <div class="d-flex flex-column flex-md-row justify-content-center my-3">
        <WelcomeText />
        <WordCloud WordsImport="WordsToShow" />
    </div>
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Recently added items
        </h1>
    </div>

    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Item item in items!)
                {
                    <div class="col">
                        <RecentlyAddedItems Item="item" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <RecentlyAddedItems />
                    </div>
                }
            }

        </div>
    </div>



    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Top 5 Collections
        </h1>
    </div>


    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Collection collection in collections)
                {
                    <div class="col">
                        <TopCollections Collection="collection" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <TopCollections />
                    </div>
                }
            }

        </div>
    </div>

</div>
 *@


<div class="container-xxl py-3 text-between ">
    @if (collections is not null)
    {
        <div class="row align-items-start row-cols-1 row-cols-md-2 ">
            <div class="col-md-9 order-md-first order-last ">
                <table class="table table-sm caption-top table-hover table-striped table-bordered
                              rounded-2 overflow-hidden">
                    <caption><h5>Top 5 collections</h5></caption>
                    <thead class="table-secondary">
                    </thead>
                    <tbody>
                        @foreach (Item item in items)
                        {
                            <tr>
                                <th>@item.Id</th>
                                <td>@item.Name</td>
                                <td>@item.Collection</td>
                                <td>@item.Author</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex col-md-3 order-first order-md-first text-start align-items-center my-auto">
                <div class="justify-content-center align-items-center my-auto  ">

                    <div class="card" style="width: auto;">
                        <div class="card-body">
                            <h5 class="card-title">Welcome to the Collections!</h5>
                            <p class="card-text">
                                Here you can enjoy your digital collection, levae comments, collect expressions and likes.
                                <br />
                                Moreover, on the Collections website you have access to many collections from all around the planet
                            </p>
                        </div>
                    </div>

                </div>



            </div>
        </div>
        <div class="row align-items-center">
            <div class="col-md-9 ">
                <table class="table table-sm caption-top table-hover table-striped table-bordered
                              rounded-2 overflow-hidden">
                    <caption><h5>Top 5 collections</h5></caption>
                    <thead class="table-secondary">
                    </thead>
                    <tbody>
                        @foreach (Collection collection in collections)
                        {
                            <tr>
                                <th>@collection.Id</th>
                                <td>@collection.Name</td>
                                <td>@collection.Theme</td>
                                <td>@collection.TotalItems</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex col-md-3 text-start align-items-center justify-content-center my-auto">
                <div class="d-flex">
                    <div class="flex-shrink-0">
                        <WordCloud WordsImport="WordsToShow" />
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

@code {
    private List<Collection>? collections;
    private List<Item>? items;
    private List<Tag>? tagsGenerated;
    private readonly DataGenerator dg = new("en");
    private const int seed = 123;
    private const string roleBlocked = "Blocked";
    private const string loginPageURL = "/Account/Login";
    private List<string> WordsToShow { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorizationLevel();

        collections = await Task.Run(() => CreateData());
        items = await Task.Run(() => CreateItems());
        tagsGenerated = await Task.Run(() => CreateTags());
        WordsToShow.Clear();
        foreach (var tag in tagsGenerated)
        {
            WordsToShow.Add(tag.Name);
        }
    }

    private List<Collection> CreateData()
    {
        return dg.GenerateCollection(5, seed);
    }

    private List<Item> CreateItems()
    {
        return dg.GenerateItems(5, seed * 100);
    }

    private List<Tag> CreateTags()
    {
        return dg.GenerateTags(30, seed);
    }

    private async Task CheckAuthorizationLevel()
    {
        AuthenticationState authenticationState = Task.Run(() =>
            _AuthenticationStateProvider.GetAuthenticationStateAsync()).Result;
        ApplicationUser? currentUser = Task.Run(() =>
            _UserManager.GetUserAsync(authenticationState.User)).Result;
        if (currentUser is not null)
        {
            bool userInRoleBlocked = Task.Run(() =>
                _UserManager.IsInRoleAsync(currentUser, roleBlocked)).Result;
            bool userIsBlocked = currentUser.LockoutEnd is not null;
            if (userInRoleBlocked || userIsBlocked)
            {
                await _SignInManager.SignOutAsync();
                _navigationManager.NavigateTo(loginPageURL);
            }
        }
    }
}