@page "/interop"
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@inject IDbContextFactory<ApplicationDbContext> _contextFactory

@rendermode InteractiveServer

<script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript" src="https://cdn.rawgit.com/jasondavies/d3-cloud/master/build/d3.layout.cloud.js"></script>

<h1>JS Interop</h1>

<h3>Create alert</h3>

<button class="btn btn-success" @onclick="ShowAlert">Show alert</button>
<br />

<h3>Ask me a question</h3>

<input @bind="questionText" />

<button class="btn btn-warning" @onclick="AskQuestion">Ask Question</button>

<div>
    The Answer was: <span id="answerSpan"></span>
</div>

<h3>Please focus</h3>

<input @ref="InputToFocus" />

<button class="btn btn-danger" @onclick="Focus">Focus!</button>

<br />

<input type="checkbox" @ref="InputToToggle" />

<button class="btn btn-danger" @onclick="ToggleMe">Focus!</button>
<div>
    <button class="btn btn-success" style="opacity: 0" @ref="InputToFade">fade me</button>
</div>

<hr />

<p>Your choice is: @ParaContent</p>

<hr />

<div class="d-flex col-md-3 pt-3 text-start align-items-center justify-content-center my-auto">
    <div class="d-flex ">
        <div class="flex-shrink-0 rounded-2" style=" box-shadow: rgba(0,0,0,0.19) 0px 10px 20px, rgba(0,0,0,0.23) 0px 6px 6px;">
            <WordCloud WordsImport="WordsToShow" />
        </div>
    </div>
</div>

<div>Value to search: <span id="valueToSearch"></span></div>




<h1>Change C# property value from JavaScript</h1>
<br />
<button @onclick='ButtonClickHandler'>Change Content - JS</button>
<br />
<p>@ParaContent</p>



<button class="btn btn-info" @onclick="SetLSData">Set LS Data</button>
<button class="btn btn-info" @onclick="GetLSData">Get LS Data</button>
<button class="btn btn-info" @onclick="DeleteLSData">Delete LS Data</button>

<p>@lsData</p>


@code {
    string lsData = "no data yet";

    string questionText = string.Empty;
    ElementReference InputToFocus;
    ElementReference InputToToggle;
    ElementReference InputToFade;
    private string myValue = string.Empty;
    // public static string MyProperty { get; set; }

    private List<string> WordsToShow { get; set; } = [];

    async Task ToggleMe()
    {
        await JSRuntime.InvokeVoidAsync("toggleIt", InputToToggle);
    }

    async Task Focus()
    {
        await JSRuntime.InvokeVoidAsync("focusOnElement", InputToFocus);
    }

    async Task Fade()
    {
        await JSRuntime.InvokeVoidAsync("unfade", InputToFade);

    }

    async Task AskQuestion()
    {
        var response = await JSRuntime.InvokeAsync<string>("createPrompt", questionText);
        await JSRuntime.InvokeVoidAsync("setElementTextById", "answerSpan", response);
    }

    async Task ShowAlert()
    {
        await JSRuntime.InvokeVoidAsync("createAlert");
    }

    private string[] wor = ["me", "you", "they", "him", "her"];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("runMe");
            _ = Fade();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        List<Tag> tagsGenerated = [];
        using (var adc = _contextFactory.CreateDbContext())
        {
            tagsGenerated = adc.Tags.AsEnumerable<Tag>().ToList<Tag>();
        }

        WordsToShow.Clear();
        foreach (var tag in tagsGenerated)
        {
            WordsToShow.Add(tag.Name);
        }
    }

    public string ParaContent = "Some Text Content 8";

    public async Task ButtonClickHandler()
    {
        await JSRuntime.InvokeAsync<string>("ChangeContentJS");
    }

    [JSInvokable]
    public void ChangeParaContentValue(string value)
    {
        ParaContent = value;
        this.StateHasChanged();
        Console.WriteLine("Hey!");
    }

    // private async Task ButtonClickHandler()
    // {
    //     var result = await JSRuntime.InvokeAsync<string>("ChangeContentJS");
    //     ParaContent = result;
    // }




    async Task SetLSData()
    {
        await JSRuntime.InvokeVoidAsync("setLocalStoreData", "cars");
    }

    async Task GetLSData()
    {
        var response = await JSRuntime.InvokeAsync<string>("getLocalStoreData", "searchText");
        lsData = response;
    }

    async Task DeleteLSData()
    {
        await JSRuntime.InvokeVoidAsync("removeLocalStoreData");
    }
}
