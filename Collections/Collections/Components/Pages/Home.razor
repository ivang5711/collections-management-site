@page "/"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager _navigationManager
@inject ApplicationDbContext adc

@rendermode InteractiveServer

<PageTitle>Collections home page</PageTitle>

@*
<div class="container-xxl py-3">
    <div class="d-flex flex-column flex-md-row justify-content-center my-3">
        <WelcomeText />
        <WordCloud WordsImport="WordsToShow" />
    </div>
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Recently added items
        </h1>
    </div>

    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Item item in items!)
                {
                    <div class="col">
                        <RecentlyAddedItems Item="item" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <RecentlyAddedItems />
                    </div>
                }
            }

        </div>
    </div>



    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Top 5 Collections
        </h1>
    </div>


    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Collection collection in collections)
                {
                    <div class="col">
                        <TopCollections Collection="collection" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <TopCollections />
                    </div>
                }
            }

        </div>
    </div>

</div>

 *@

<div class="container-xxl py-3 text-between ">
    @if (collections is not null)
    {
        <div class="row align-items-start row-cols-1 row-cols-md-2 ">
            <div class="col-md-9 order-md-first order-last">
                <h5>Recently added Items</h5>
                <table class="table table-sm table-hover table-striped table-bordered
                              rounded-2 overflow-hidden">
                    <thead class="table-secondary">
                        <tr>
                            <th>Id</th>
                            <th>name</th>
                            <th>Collection</th>
                            <th>Author</th>
                            <th>Link</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int i = 1;
                            foreach (Item item in items)
                            {
                                <tr>
                                    <th>@(i++)</th>
                                    <td>@item.Name</td>
                                    <td>@item.Collection.Name</td>
                                    <td>@item.Author</td>
                                    <td>
                                        <a class="btn-sm btn-outline-secondary"
                                           href="/item-details/@item.Id">Details</a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex col-md-3 order-first order-md-first text-start align-items-center my-auto">
                <div class="justify-content-center align-items-center my-auto  ">
                    <div class="card" style="width: auto;">
                        <div class="card-body">
                            <h5 class="card-title">Welcome to the Collections!</h5>
                            <p class="card-text">
                                Here you can enjoy your digital collection, levae comments, collect expressions and likes.
                                <br />
                                Moreover, on the Collections website you have access to many collections from all around the planet
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row align-items-center">
            <div class="col-md-9 ">
                <h5>Top 5 collections</h5>
                <table class="table table-sm table-hover table-striped table-bordered
                              rounded-2 overflow-hidden">
                    <thead class="table-secondary">
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Theme</th>
                            <th>Total Items</th>
                            <th>Link</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int j = 1;
                            foreach (Collection collection in collections)
                            {
                                <tr>
                                    <th>@(j++)</th>
                                    <td>@collection.Name</td>
                                    <td>@collection.Theme.Name</td>
                                    <td>@collection.TotalItems</td>
                                    <td>
                                        <a class="btn-sm btn-outline-secondary"
                                           href="/collection-details/@collection.Id">Details</a>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <div class="d-flex col-md-3 text-start align-items-center justify-content-center my-auto">
                <div class="d-flex">
                    <div class="flex-shrink-0">
                        <WordCloud WordsImport="WordsToShow" />
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
</div>


@code {
    private List<Collection>? collections;
    private List<Item> items = [];
    private List<Tag>? tagsGenerated;
    private readonly DataGenerator dg = new("en");
    private const int seed = 123;
    private const string roleBlocked = "Blocked";
    private const string loginPageURL = "/Account/Login";
    private List<string> WordsToShow { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorizationLevel();

        var te = await Task.Run(() => CreateData());
        collections = te.Take(5).ToList();

        List<Item> temp = [];

        foreach (var t in collections)
        {
            t.TotalItems = t.Items.Count;
            temp.AddRange(t.Items);
        }

        items.AddRange(temp.Take(5));

        tagsGenerated = [];
        var k2 = adc.Tags.AsEnumerable<Tag>().ToList<Tag>();
        tagsGenerated.AddRange(k2);

        WordsToShow.Clear();
        foreach (var tag in tagsGenerated)
        {
            WordsToShow.Add(tag.Name);
        }

        //PopulateTable();

    }

    private void PopulateTable()
    {
        using (adc)
        {
            var collection = new Collection
                {
                    Name = "My awesome collection",
                    ThemeID = 6,
                    Items = new List<Item>
                    {
                        new Item
                        {
                            Name = "Unusual keyboard",
                            Author = "Logitech corp.",
                            ImageLink = "https://th.bing.com/th/id/R.9b2a3fd769228fb57123b60d09cb25d7?rik=WrrDpbHet61rCg&riu=http%3a%2f%2fupload.wikimedia.org%2fwikipedia%2fcommons%2f9%2f9f%2fApple_(Standard)_Keyboard_M0116.jpg&ehk=%2fEGwXB3aHJoiSK0PyIntdA4oLRO0LCKPNVamfIYI5gY%3d&risl=&pid=ImgRaw&r=0",
                            Comments = new List<Comment>
                            {
                                new Comment { Name = "Joe Doe", Text = "This comment is awesome and amazing!" },
                                new Comment { Name = "Billy Jane", Text = "The best product on the market!!! No doubt!" },
                            }
                        }

                    },
                    ImageLink = "https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.nytimes.com%2Fwirecutter%2Freviews%2Fthe-best-bluetooth-keyboard%2F&psig=AOvVaw0KxCHDSN3VGHnV0nEis_oT&ust=1705006685182000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCNi6soDb04MDFQAAAAAdAAAAABAQ",

                };

            adc.Collections.Add(collection);
            adc.SaveChanges();
        }
    }

    private List<Collection> CreateData()
    {
        var t = adc.Collections
        .Include(e => e.Theme)
        .Include(e => e.Items)
        .ThenInclude(e => e.Tags)
        .Include(e => e.Items)
        .ThenInclude(e => e.Likes)
        .ToList();
        return t;
    }

    // private List<Item> CreateItems()
    // {
    //     return dg.GenerateItems(1, seed * 100);
    // }

    // private List<Tag> CreateTags()
    // {
    //     return dg.GenerateTags(30, seed);
    // }

    private async Task CheckAuthorizationLevel()
    {
        AuthenticationState authenticationState = Task.Run(() =>
            _AuthenticationStateProvider.GetAuthenticationStateAsync()).Result;
        ApplicationUser? currentUser = Task.Run(() =>
            _UserManager.GetUserAsync(authenticationState.User)).Result;
        if (currentUser is not null)
        {
            bool userInRoleBlocked = Task.Run(() =>
                _UserManager.IsInRoleAsync(currentUser, roleBlocked)).Result;
            bool userIsBlocked = currentUser.LockoutEnd is not null;
            if (userInRoleBlocked || userIsBlocked)
            {
                await _SignInManager.SignOutAsync();
                _navigationManager.NavigateTo(loginPageURL);
            }
        }
    }
}