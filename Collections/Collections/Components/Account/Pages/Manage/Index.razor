@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Collections.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IStringLocalizer<Resource> localizer

<PageTitle>@localizer["Profile"]</PageTitle>

<h3>@localizer["Profile"]</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-12 px-5">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control search-input" style="background-color: rgba(255,255,255,0.38);" placeholder="@localizer["Please choose your username."]" disabled />
                <label for="username" class="form-label">@localizer["Username"]</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FullName" class="form-control search-input" placeholder="@localizer["Please enter your full name."]" />
                <label for="Full name" class="form-label">@localizer["Full name"]</label>
                <ValidationMessage For="() => Input.FullName" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-outline-secondary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? fullName;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        fullName = user.FullName;

        Input.FullName ??= fullName;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.FullName != fullName)
        {
            user.FullName = Input.FullName ??= string.Empty;
            var setFullNameResult = await UserManager.UpdateAsync(user);
            if (!setFullNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set user name.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        
        [Display(Name = "Phone number")]
        public string? FullName { get; set; }
    }
}
