@page "/interop"
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript" src="https://cdn.rawgit.com/jasondavies/d3-cloud/master/build/d3.layout.cloud.js"></script>

<h1>JS Interop</h1>

<h3>Create alert</h3>

<button class="btn btn-success" @onclick="ShowAlert">Show alert</button>
<br />

<h3>Ask me a question</h3>

<input @bind="questionText" />

<button class="btn btn-warning" @onclick="AskQuestion">Ask Question</button>

<div>
    The Answer was: <span id="answerSpan"></span>
</div>

<h3>Please focus</h3>

<input @ref="InputToFocus" />

<button class="btn btn-danger" @onclick="Focus">Focus!</button>

<br />

<input type="checkbox" @ref="InputToToggle" />

<button class="btn btn-danger" @onclick="ToggleMe">Focus!</button>
<div>
    <button class="btn btn-success" style="opacity: 0" @ref="InputToFade">fade me</button>
</div>



<h2>Selected file</h2>

@if(Error != string.Empty)
{
    <p>@Error</p>
}



<div style="margin-bottom: 20px; display:flex; ">
    <div>Select your file:</div>
<InputFile OnChange="UploadFile" accept=".png,.jpg,.jpeg,.tiff" />
</div>


@code {
    public string FileName { get; set; } = string.Empty;
    const int maxFileSize = 1024 * 1024 * 1; // 5 MB
    public string Error { get; set; } = string.Empty;

    public async Task UploadFile(InputFileChangeEventArgs e)
    {

        Error = string.Empty;
        var file = e.File;

        if (file is not null)
        {
            FileName = file.Name;
            if (file.Size > maxFileSize)
            {
                Error = $"File is too big! The file size is limited to {maxFileSize}";
                StateHasChanged();
                return;
            }

            try
            {
                var randomFileName = Path.GetRandomFileName();
                var fileExtension = Path.GetExtension(file.Name);
                var newFileName = Path.ChangeExtension(randomFileName, fileExtension);
                var basePath = Directory.GetCurrentDirectory();
                string path = Path.Combine(basePath, "bloobtempfolder", newFileName);
                Directory.CreateDirectory(Path.Combine(basePath, "bloobtempfolder"));
                using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch(Exception exception)
            {
                Error = $"File Error: {exception}";
                StateHasChanged();
            }
        }
    }

    string questionText = string.Empty;
    ElementReference InputToFocus;
    ElementReference InputToToggle;
    ElementReference InputToFade;

    async Task ToggleMe()
    {
        await JsRuntime.InvokeVoidAsync("toggleIt", InputToToggle);
    }

    async Task Focus()
    {
        await JsRuntime.InvokeVoidAsync("focusOnElement", InputToFocus);
    }

    async Task Fade()
    {
        await JsRuntime.InvokeVoidAsync("unfade", InputToFade);

    }

    async Task AskQuestion()
    {
        var response = await JsRuntime.InvokeAsync<string>("createPrompt", questionText);
        await JsRuntime.InvokeVoidAsync("setElementTextById", "answerSpan", response);
    }

    async Task ShowAlert()
    {
        await JsRuntime.InvokeVoidAsync("createAlert");
    }

    private string[] wor = ["me", "you", "they", "him", "her"];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsRuntime.InvokeVoidAsync("runMe");
            _ = Fade();
        }
    }

}
