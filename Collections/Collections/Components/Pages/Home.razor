@page "/"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager _navigationManager

<PageTitle>Collections home page</PageTitle>
<div class="container-xxl py-3">
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Tag cloud
        </h1>
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <TagCloud />
    </div>
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Recently added items
        </h1>
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Item item in items!)
                {
                    <div class="col">
                        <RecentlyAddedItems Item="item" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <RecentlyAddedItems />
                    </div>
                }
            }

        </div>
    </div>
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Top 5 Collections
        </h1>
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Collection collection in collections)
                {
                    <div class="col">
                        <TopCollections Collection="collection" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <TopCollections />
                    </div>
                }
            }

        </div>
    </div>
</div>

@code {
    private List<Collection>? collections;
    private List<Item>? items;
    public List<Collection> CreateData()
    {
        DataGenerator fakeCollections = new("en");
        int seed = 123;
        return fakeCollections.GenerateCollection(5, seed);
    }

    public List<Item> CreateItems()
    {
        DataGenerator fakeItems = new("en");
        return fakeItems.GenerateItems(5, 558769);
    }

    protected override async Task OnInitializedAsync()
    {
        string roleBlocked = "Blocked";
        var authenticationState = Task.Run(() =>
            _AuthenticationStateProvider.GetAuthenticationStateAsync()).Result;
        var currentUser = Task.Run(() =>
            _UserManager.GetUserAsync(authenticationState.User)).Result;
        if (currentUser is not null)
        {
            var userInRoleBlocked = Task.Run(() =>
                _UserManager.IsInRoleAsync(currentUser, roleBlocked)).Result;
            var userIsBlocked = currentUser.LockoutEnd is not null;
            if (userInRoleBlocked || userIsBlocked)
            {
                await _SignInManager.SignOutAsync();
                _navigationManager.NavigateTo("/Account/Login");
                Console.WriteLine("Not Admin!");
            }
        }

        collections = await Task.Run(() => CreateData());
        items = await Task.Run(() => CreateItems());
    }
}
