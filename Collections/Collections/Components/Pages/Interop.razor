@page "/interop"
@inject IJSRuntime JsRuntime
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

@rendermode InteractiveServer

<script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
<script type="text/javascript" src="https://cdn.rawgit.com/jasondavies/d3-cloud/master/build/d3.layout.cloud.js"></script>

<h1>JS Interop</h1>

<h3>Create alert</h3>

<button class="btn btn-success" @onclick="ShowAlert">Show alert</button>
<br />

<h3>Ask me a question</h3>

<input @bind="questionText" />

<button class="btn btn-warning" @onclick="AskQuestion">Ask Question</button>

<div>
    The Answer was: <span id="answerSpan"></span>
</div>

<h3>Please focus</h3>

<input @ref="InputToFocus" />

<button class="btn btn-danger" @onclick="Focus">Focus!</button>

<br />

<input type="checkbox" @ref="InputToToggle" />

<button class="btn btn-danger" @onclick="ToggleMe">Focus!</button>
<div>
    <button class="btn btn-success" style="opacity: 0" @ref="InputToFade">fade me</button>
</div>


<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>
<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<ul>
    @foreach(string message in messages)
    {
        <li>@message</li>
    }
</ul>



@code {


    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            NavManager.Refresh(true);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    string questionText = string.Empty;
    ElementReference InputToFocus;
    ElementReference InputToToggle;
    ElementReference InputToFade;

    async Task ToggleMe()
    {
        await JsRuntime.InvokeVoidAsync("toggleIt", InputToToggle);
    }

    async Task Focus()
    {
        await JsRuntime.InvokeVoidAsync("focusOnElement", InputToFocus);
    }

    async Task Fade()
    {
        await JsRuntime.InvokeVoidAsync("unfade", InputToFade);

    }

    async Task AskQuestion()
    {
        var response = await JsRuntime.InvokeAsync<string>("createPrompt", questionText);
        await JsRuntime.InvokeVoidAsync("setElementTextById", "answerSpan", response);
    }

    async Task ShowAlert()
    {
        await JsRuntime.InvokeVoidAsync("createAlert");
    }

    private string[] wor = ["me", "you", "they", "him", "her"];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JsRuntime.InvokeVoidAsync("runMe");
            _ = Fade();
        }
    }

}
