@page "/"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject SignInManager<ApplicationUser> _SignInManager
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager _navigationManager

<PageTitle>Collections home page</PageTitle>
<div class="container-xxl py-3">
    <div class="d-flex flex-column flex-md-row justify-content-center my-3">
        <WelcomeText />
        <WordCloud WordsImport="WordsToShow" />
    </div>
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Recently added items
        </h1>
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Item item in items!)
                {
                    <div class="col">
                        <RecentlyAddedItems Item="item" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <RecentlyAddedItems />
                    </div>
                }
            }

        </div>
    </div>
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Top 5 Collections
        </h1>
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5
                    row-cols-xl-5 g-3 justify-content-center">
            @if (collections is not null)
            {
                @foreach (Collection collection in collections)
                {
                    <div class="col">
                        <TopCollections Collection="collection" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 5; i++)
                {
                    <div class="col">
                        <TopCollections />
                    </div>
                }
            }

        </div>
    </div>
</div>

@code {
    private List<Collection>? collections;
    private List<Item>? items;
    private List<Tag>? tagsGenerated;
    private readonly DataGenerator dg = new("en");
    private const int seed = 123;
    private const string roleBlocked = "Blocked";
    private const string loginPageURL = "/Account/Login";
    private List<string> WordsToShow { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorizationLevel();

        collections = await Task.Run(() => CreateData());
        items = await Task.Run(() => CreateItems());
        tagsGenerated = await Task.Run(() => CreateTags());
        WordsToShow.Clear();
        foreach (var tag in tagsGenerated)
        {
            WordsToShow.Add(tag.Name);
        }
    }

    private List<Collection> CreateData()
    {
        return dg.GenerateCollection(5, seed);
    }

    private List<Item> CreateItems()
    {
        return dg.GenerateItems(5, seed * 100);
    }

    private List<Tag> CreateTags()
    {
        return dg.GenerateTags(10, seed);
    }

    private async Task CheckAuthorizationLevel()
    {
        AuthenticationState authenticationState = Task.Run(() =>
            _AuthenticationStateProvider.GetAuthenticationStateAsync()).Result;
        ApplicationUser? currentUser = Task.Run(() =>
            _UserManager.GetUserAsync(authenticationState.User)).Result;
        if (currentUser is not null)
        {
            bool userInRoleBlocked = Task.Run(() =>
                _UserManager.IsInRoleAsync(currentUser, roleBlocked)).Result;
            bool userIsBlocked = currentUser.LockoutEnd is not null;
            if (userInRoleBlocked || userIsBlocked)
            {
                await _SignInManager.SignOutAsync();
                _navigationManager.NavigateTo(loginPageURL);
            }
        }
    }
}